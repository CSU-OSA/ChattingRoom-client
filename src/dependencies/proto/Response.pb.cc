// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Response.proto

#include "Response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto
{
    namespace response
    {
        constexpr ResponsePOJO::ResponsePOJO(
                ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
                : message_(), channelinfo_(), membernick_(), result_(nullptr), type_(0)
        {}

        struct ResponsePOJODefaultTypeInternal
        {
            constexpr ResponsePOJODefaultTypeInternal()
                    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
            {}

            ~ResponsePOJODefaultTypeInternal()
            {}

            union
            {
                ResponsePOJO _instance;
            };
        };

        PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponsePOJODefaultTypeInternal _ResponsePOJO_default_instance_;

        constexpr Result::Result(
                ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
                : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string), result_(false)
        {}

        struct ResultDefaultTypeInternal
        {
            constexpr ResultDefaultTypeInternal()
                    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
            {}

            ~ResultDefaultTypeInternal()
            {}

            union
            {
                Result _instance;
            };
        };

        PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultDefaultTypeInternal _Result_default_instance_;

        constexpr Message::Message(
                ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
                : rectime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
                  channel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
                  fromnick_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
                  content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
        {}

        struct MessageDefaultTypeInternal
        {
            constexpr MessageDefaultTypeInternal()
                    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
            {}

            ~MessageDefaultTypeInternal()
            {}

            union
            {
                Message _instance;
            };
        };

        PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageDefaultTypeInternal _Message_default_instance_;

        constexpr ChannelInfo::ChannelInfo(
                ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
                : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string), ispublic_(false), membernum_(0)
        {}

        struct ChannelInfoDefaultTypeInternal
        {
            constexpr ChannelInfoDefaultTypeInternal()
                    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
            {}

            ~ChannelInfoDefaultTypeInternal()
            {}

            union
            {
                ChannelInfo _instance;
            };
        };

        PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelInfoDefaultTypeInternal _ChannelInfo_default_instance_;
    }  // namespace response
}  // namespace proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Response_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *file_level_enum_descriptors_Response_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_Response_2eproto = nullptr;

const uint32_t TableStruct_Response_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::proto::response::ResponsePOJO, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::proto::response::ResponsePOJO, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::proto::response::ResponsePOJO, type_),
        PROTOBUF_FIELD_OFFSET(::proto::response::ResponsePOJO, message_),
        PROTOBUF_FIELD_OFFSET(::proto::response::ResponsePOJO, result_),
        PROTOBUF_FIELD_OFFSET(::proto::response::ResponsePOJO, channelinfo_),
        PROTOBUF_FIELD_OFFSET(::proto::response::ResponsePOJO, membernick_),
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::proto::response::Result, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::proto::response::Result, result_),
        PROTOBUF_FIELD_OFFSET(::proto::response::Result, msg_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::proto::response::Message, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::proto::response::Message, rectime_),
        PROTOBUF_FIELD_OFFSET(::proto::response::Message, channel_),
        PROTOBUF_FIELD_OFFSET(::proto::response::Message, fromnick_),
        PROTOBUF_FIELD_OFFSET(::proto::response::Message, content_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::proto::response::ChannelInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::proto::response::ChannelInfo, name_),
        PROTOBUF_FIELD_OFFSET(::proto::response::ChannelInfo, ispublic_),
        PROTOBUF_FIELD_OFFSET(::proto::response::ChannelInfo, membernum_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0,  11, -1, sizeof(::proto::response::ResponsePOJO)},
        {16, -1, -1, sizeof(::proto::response::Result)},
        {24, -1, -1, sizeof(::proto::response::Message)},
        {34, -1, -1, sizeof(::proto::response::ChannelInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::proto::response::_ResponsePOJO_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::proto::response::_Result_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::proto::response::_Message_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::proto::response::_ChannelInfo_default_instance_),
};

const char descriptor_table_protodef_Response_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
        "\n\016Response.proto\022\016proto.response\"\260\002\n\014Res"
        "ponsePOJO\022/\n\004type\030\001 \001(\0162!.proto.response"
        ".ResponsePOJO.Type\022(\n\007message\030\002 \003(\0132\027.pr"
        "oto.response.Message\022+\n\006result\030\003 \001(\0132\026.p"
        "roto.response.ResultH\000\210\001\001\0220\n\013channelInfo"
        "\030\004 \003(\0132\033.proto.response.ChannelInfo\022\022\n\nm"
        "emberNick\030\005 \003(\t\"G\n\004Type\022\n\n\006RESULT\020\000\022\013\n\007M"
        "ESSAGE\020\001\022\017\n\013ChannelList\020\002\022\025\n\021ChannelMemb"
        "erList\020\003B\t\n\007_result\"%\n\006Result\022\016\n\006result\030"
        "\001 \001(\010\022\013\n\003msg\030\002 \001(\t\"N\n\007Message\022\017\n\007recTime"
        "\030\001 \001(\t\022\017\n\007channel\030\002 \001(\t\022\020\n\010fromNick\030\003 \001("
        "\t\022\017\n\007content\030\004 \001(\t\"@\n\013ChannelInfo\022\014\n\004nam"
        "e\030\001 \001(\t\022\020\n\010isPublic\030\002 \001(\010\022\021\n\tmemberNum\030\003"
        " \001(\005B\002H\001b\006proto3";
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Response_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Response_2eproto = {
        false, false, 536, descriptor_table_protodef_Response_2eproto, "Response.proto",
        &descriptor_table_Response_2eproto_once, nullptr, 0, 4,
        schemas, file_default_instances, TableStruct_Response_2eproto::offsets,
        file_level_metadata_Response_2eproto, file_level_enum_descriptors_Response_2eproto,
        file_level_service_descriptors_Response_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *
descriptor_table_Response_2eproto_getter()
{
    return &descriptor_table_Response_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Response_2eproto(
        &descriptor_table_Response_2eproto);
namespace proto
{
    namespace response
    {
        const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *ResponsePOJO_Type_descriptor()
        {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Response_2eproto);
            return file_level_enum_descriptors_Response_2eproto[0];
        }

        bool ResponsePOJO_Type_IsValid(int value)
        {
            switch (value)
            {
                case 0:
                case 1:
                case 2:
                case 3:
                    return true;
                default:
                    return false;
            }
        }

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
        constexpr ResponsePOJO_Type ResponsePOJO::RESULT;
        constexpr ResponsePOJO_Type ResponsePOJO::MESSAGE;
        constexpr ResponsePOJO_Type ResponsePOJO::ChannelList;
        constexpr ResponsePOJO_Type ResponsePOJO::ChannelMemberList;
        constexpr ResponsePOJO_Type ResponsePOJO::Type_MIN;
        constexpr ResponsePOJO_Type ResponsePOJO::Type_MAX;
        constexpr int ResponsePOJO::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

        class ResponsePOJO::_Internal
        {
        public:
            using HasBits = decltype(std::declval<ResponsePOJO>()._has_bits_);

            static const ::proto::response::Result &result(const ResponsePOJO *msg);

            static void set_has_result(HasBits *has_bits)
            {
                (*has_bits)[0] |= 1u;
            }
        };

        const ::proto::response::Result &
        ResponsePOJO::_Internal::result(const ResponsePOJO *msg)
        {
            return *msg->result_;
        }

        ResponsePOJO::ResponsePOJO(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                                   bool is_message_owned)
                : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
                  message_(arena),
                  channelinfo_(arena),
                  membernick_(arena)
        {
            SharedCtor();
            if (!is_message_owned)
            {
                RegisterArenaDtor(arena);
            }
            // @@protoc_insertion_point(arena_constructor:proto.response.ResponsePOJO)
        }

        ResponsePOJO::ResponsePOJO(const ResponsePOJO &from)
                : ::PROTOBUF_NAMESPACE_ID::Message(),
                  _has_bits_(from._has_bits_),
                  message_(from.message_),
                  channelinfo_(from.channelinfo_),
                  membernick_(from.membernick_)
        {
            _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
            if (from._internal_has_result())
            {
                result_ = new ::proto::response::Result(*from.result_);
            } else
            {
                result_ = nullptr;
            }
            type_ = from.type_;
            // @@protoc_insertion_point(copy_constructor:proto.response.ResponsePOJO)
        }

        inline void ResponsePOJO::SharedCtor()
        {
            ::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(
                             reinterpret_cast<char *>(&result_) - reinterpret_cast<char *>(this)),
                     0, static_cast<size_t>(reinterpret_cast<char *>(&type_) -
                                            reinterpret_cast<char *>(&result_)) + sizeof(type_));
        }

        ResponsePOJO::~ResponsePOJO()
        {
            // @@protoc_insertion_point(destructor:proto.response.ResponsePOJO)
            if (GetArenaForAllocation() != nullptr) return;
            SharedDtor();
            _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        inline void ResponsePOJO::SharedDtor()
        {
            GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
            if (this != internal_default_instance()) delete result_;
        }

        void ResponsePOJO::ArenaDtor(void *object)
        {
            ResponsePOJO *_this = reinterpret_cast< ResponsePOJO * >(object);
            (void) _this;
        }

        void ResponsePOJO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
        {
        }

        void ResponsePOJO::SetCachedSize(int size) const
        {
            _cached_size_.Set(size);
        }

        void ResponsePOJO::Clear()
        {
// @@protoc_insertion_point(message_clear_start:proto.response.ResponsePOJO)
            uint32_t cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            message_.Clear();
            channelinfo_.Clear();
            membernick_.Clear();
            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000001u)
            {
                GOOGLE_DCHECK(result_ != nullptr);
                result_->Clear();
            }
            type_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        const char *ResponsePOJO::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
        {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
            _Internal::HasBits has_bits{};
            while (!ctx->Done(&ptr))
            {
                uint32_t tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                switch (tag >> 3)
                {
                    // .proto.response.ResponsePOJO.Type type = 1;
                    case 1:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                        {
                            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                            CHK_(ptr);
                            _internal_set_type(static_cast<::proto::response::ResponsePOJO_Type>(val));
                        } else
                            goto handle_unusual;
                        continue;
                        // repeated .proto.response.Message message = 2;
                    case 2:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18))
                        {
                            ptr -= 1;
                            do
                            {
                                ptr += 1;
                                ptr = ctx->ParseMessage(_internal_add_message(), ptr);
                                CHK_(ptr);
                                if (!ctx->DataAvailable(ptr)) break;
                            } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
                        } else
                            goto handle_unusual;
                        continue;
                        // optional .proto.response.Result result = 3;
                    case 3:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                        {
                            ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                        // repeated .proto.response.ChannelInfo channelInfo = 4;
                    case 4:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34))
                        {
                            ptr -= 1;
                            do
                            {
                                ptr += 1;
                                ptr = ctx->ParseMessage(_internal_add_channelinfo(), ptr);
                                CHK_(ptr);
                                if (!ctx->DataAvailable(ptr)) break;
                            } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
                        } else
                            goto handle_unusual;
                        continue;
                        // repeated string memberNick = 5;
                    case 5:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42))
                        {
                            ptr -= 1;
                            do
                            {
                                ptr += 1;
                                auto str = _internal_add_membernick();
                                ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                                CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str,
                                                                                   "proto.response.ResponsePOJO.memberNick"));
                                CHK_(ptr);
                                if (!ctx->DataAvailable(ptr)) break;
                            } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
                        } else
                            goto handle_unusual;
                        continue;
                    default:
                        goto handle_unusual;
                }  // switch
                handle_unusual:
                if ((tag == 0) || ((tag & 7) == 4))
                {
                    CHK_(ptr);
                    ctx->SetLastTag(tag);
                    goto message_done;
                }
                ptr = UnknownFieldParse(
                        tag,
                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                        ptr, ctx);
                CHK_(ptr != nullptr);
            }  // while
            message_done:
            _has_bits_.Or(has_bits);
            return ptr;
            failure:
            ptr = nullptr;
            goto message_done;
#undef CHK_
        }

        uint8_t *ResponsePOJO::_InternalSerialize(
                uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
        {
            // @@protoc_insertion_point(serialize_to_array_start:proto.response.ResponsePOJO)
            uint32_t cached_has_bits = 0;
            (void) cached_has_bits;

            // .proto.response.ResponsePOJO.Type type = 1;
            if (this->_internal_type() != 0)
            {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
                        1, this->_internal_type(), target);
            }

            // repeated .proto.response.Message message = 2;
            for (unsigned int i = 0,
                         n = static_cast<unsigned int>(this->_internal_message_size()); i < n; i++)
            {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(2, this->_internal_message(i), target, stream);
            }

            // optional .proto.response.Result result = 3;
            if (_internal_has_result())
            {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(
                        3, _Internal::result(this), target, stream);
            }

            // repeated .proto.response.ChannelInfo channelInfo = 4;
            for (unsigned int i = 0,
                         n = static_cast<unsigned int>(this->_internal_channelinfo_size()); i < n; i++)
            {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(4, this->_internal_channelinfo(i), target, stream);
            }

            // repeated string memberNick = 5;
            for (int i = 0, n = this->_internal_membernick_size(); i < n; i++)
            {
                const auto &s = this->_internal_membernick(i);
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                        s.data(), static_cast<int>(s.length()),
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                        "proto.response.ResponsePOJO.memberNick");
                target = stream->WriteString(5, s, target);
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
            {
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
            }
            // @@protoc_insertion_point(serialize_to_array_end:proto.response.ResponsePOJO)
            return target;
        }

        size_t ResponsePOJO::ByteSizeLong() const
        {
// @@protoc_insertion_point(message_byte_size_start:proto.response.ResponsePOJO)
            size_t total_size = 0;

            uint32_t cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            // repeated .proto.response.Message message = 2;
            total_size += 1UL * this->_internal_message_size();
            for (const auto &msg: this->message_)
            {
                total_size +=
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
            }

            // repeated .proto.response.ChannelInfo channelInfo = 4;
            total_size += 1UL * this->_internal_channelinfo_size();
            for (const auto &msg: this->channelinfo_)
            {
                total_size +=
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
            }

            // repeated string memberNick = 5;
            total_size += 1 *
                          ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(membernick_.size());
            for (int i = 0, n = membernick_.size(); i < n; i++)
            {
                total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                        membernick_.Get(i));
            }

            // optional .proto.response.Result result = 3;
            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000001u)
            {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *result_);
            }

            // .proto.response.ResponsePOJO.Type type = 1;
            if (this->_internal_type() != 0)
            {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
            }

            return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
        }

        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponsePOJO::_class_data_ = {
                ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
                ResponsePOJO::MergeImpl
        };

        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *ResponsePOJO::GetClassData() const
        { return &_class_data_; }

        void ResponsePOJO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to,
                                     const ::PROTOBUF_NAMESPACE_ID::Message &from)
        {
            static_cast<ResponsePOJO *>(to)->MergeFrom(
                    static_cast<const ResponsePOJO &>(from));
        }


        void ResponsePOJO::MergeFrom(const ResponsePOJO &from)
        {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.response.ResponsePOJO)
            GOOGLE_DCHECK_NE(&from, this);
            uint32_t cached_has_bits = 0;
            (void) cached_has_bits;

            message_.MergeFrom(from.message_);
            channelinfo_.MergeFrom(from.channelinfo_);
            membernick_.MergeFrom(from.membernick_);
            if (from._internal_has_result())
            {
                _internal_mutable_result()->::proto::response::Result::MergeFrom(from._internal_result());
            }
            if (from._internal_type() != 0)
            {
                _internal_set_type(from._internal_type());
            }
            _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        }

        void ResponsePOJO::CopyFrom(const ResponsePOJO &from)
        {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.response.ResponsePOJO)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool ResponsePOJO::IsInitialized() const
        {
            return true;
        }

        void ResponsePOJO::InternalSwap(ResponsePOJO *other)
        {
            using std::swap;
            _internal_metadata_.InternalSwap(&other->_internal_metadata_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            message_.InternalSwap(&other->message_);
            channelinfo_.InternalSwap(&other->channelinfo_);
            membernick_.InternalSwap(&other->membernick_);
            ::PROTOBUF_NAMESPACE_ID::internal::memswap<
                    PROTOBUF_FIELD_OFFSET(ResponsePOJO, type_)
                    + sizeof(ResponsePOJO::type_)
                    - PROTOBUF_FIELD_OFFSET(ResponsePOJO, result_)>(
                    reinterpret_cast<char *>(&result_),
                    reinterpret_cast<char *>(&other->result_));
        }

        ::PROTOBUF_NAMESPACE_ID::Metadata ResponsePOJO::GetMetadata() const
        {
            return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                    &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
                    file_level_metadata_Response_2eproto[0]);
        }

// ===================================================================

        class Result::_Internal
        {
        public:
        };

        Result::Result(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                       bool is_message_owned)
                : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
        {
            SharedCtor();
            if (!is_message_owned)
            {
                RegisterArenaDtor(arena);
            }
            // @@protoc_insertion_point(arena_constructor:proto.response.Result)
        }

        Result::Result(const Result &from)
                : ::PROTOBUF_NAMESPACE_ID::Message()
        {
            _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
            msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (!from._internal_msg().empty())
            {
                msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(),
                         GetArenaForAllocation());
            }
            result_ = from.result_;
            // @@protoc_insertion_point(copy_constructor:proto.response.Result)
        }

        inline void Result::SharedCtor()
        {
            msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            result_ = false;
        }

        Result::~Result()
        {
            // @@protoc_insertion_point(destructor:proto.response.Result)
            if (GetArenaForAllocation() != nullptr) return;
            SharedDtor();
            _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        inline void Result::SharedDtor()
        {
            GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
            msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        }

        void Result::ArenaDtor(void *object)
        {
            Result *_this = reinterpret_cast< Result * >(object);
            (void) _this;
        }

        void Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
        {
        }

        void Result::SetCachedSize(int size) const
        {
            _cached_size_.Set(size);
        }

        void Result::Clear()
        {
// @@protoc_insertion_point(message_clear_start:proto.response.Result)
            uint32_t cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            msg_.ClearToEmpty();
            result_ = false;
            _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        const char *Result::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
        {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
            while (!ctx->Done(&ptr))
            {
                uint32_t tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                switch (tag >> 3)
                {
                    // bool result = 1;
                    case 1:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                        {
                            result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                        // string msg = 2;
                    case 2:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18))
                        {
                            auto str = _internal_mutable_msg();
                            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.response.Result.msg"));
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                    default:
                        goto handle_unusual;
                }  // switch
                handle_unusual:
                if ((tag == 0) || ((tag & 7) == 4))
                {
                    CHK_(ptr);
                    ctx->SetLastTag(tag);
                    goto message_done;
                }
                ptr = UnknownFieldParse(
                        tag,
                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                        ptr, ctx);
                CHK_(ptr != nullptr);
            }  // while
            message_done:
            return ptr;
            failure:
            ptr = nullptr;
            goto message_done;
#undef CHK_
        }

        uint8_t *Result::_InternalSerialize(
                uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
        {
            // @@protoc_insertion_point(serialize_to_array_start:proto.response.Result)
            uint32_t cached_has_bits = 0;
            (void) cached_has_bits;

            // bool result = 1;
            if (this->_internal_result() != 0)
            {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1,
                                                                                             this->_internal_result(),
                                                                                             target);
            }

            // string msg = 2;
            if (!this->_internal_msg().empty())
            {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                        this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                        "proto.response.Result.msg");
                target = stream->WriteStringMaybeAliased(
                        2, this->_internal_msg(), target);
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
            {
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
            }
            // @@protoc_insertion_point(serialize_to_array_end:proto.response.Result)
            return target;
        }

        size_t Result::ByteSizeLong() const
        {
// @@protoc_insertion_point(message_byte_size_start:proto.response.Result)
            size_t total_size = 0;

            uint32_t cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            // string msg = 2;
            if (!this->_internal_msg().empty())
            {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_msg());
            }

            // bool result = 1;
            if (this->_internal_result() != 0)
            {
                total_size += 1 + 1;
            }

            return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
        }

        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
                ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
                Result::MergeImpl
        };

        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *Result::GetClassData() const
        { return &_class_data_; }

        void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to,
                               const ::PROTOBUF_NAMESPACE_ID::Message &from)
        {
            static_cast<Result *>(to)->MergeFrom(
                    static_cast<const Result &>(from));
        }


        void Result::MergeFrom(const Result &from)
        {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.response.Result)
            GOOGLE_DCHECK_NE(&from, this);
            uint32_t cached_has_bits = 0;
            (void) cached_has_bits;

            if (!from._internal_msg().empty())
            {
                _internal_set_msg(from._internal_msg());
            }
            if (from._internal_result() != 0)
            {
                _internal_set_result(from._internal_result());
            }
            _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        }

        void Result::CopyFrom(const Result &from)
        {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.response.Result)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool Result::IsInitialized() const
        {
            return true;
        }

        void Result::InternalSwap(Result *other)
        {
            using std::swap;
            auto *lhs_arena = GetArenaForAllocation();
            auto *rhs_arena = other->GetArenaForAllocation();
            _internal_metadata_.InternalSwap(&other->_internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                    &msg_, lhs_arena,
                    &other->msg_, rhs_arena
            );
            swap(result_, other->result_);
        }

        ::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const
        {
            return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                    &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
                    file_level_metadata_Response_2eproto[1]);
        }

// ===================================================================

        class Message::_Internal
        {
        public:
        };

        Message::Message(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                         bool is_message_owned)
                : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
        {
            SharedCtor();
            if (!is_message_owned)
            {
                RegisterArenaDtor(arena);
            }
            // @@protoc_insertion_point(arena_constructor:proto.response.Message)
        }

        Message::Message(const Message &from)
                : ::PROTOBUF_NAMESPACE_ID::Message()
        {
            _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
            rectime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            rectime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (!from._internal_rectime().empty())
            {
                rectime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                             from._internal_rectime(),
                             GetArenaForAllocation());
            }
            channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (!from._internal_channel().empty())
            {
                channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                             from._internal_channel(),
                             GetArenaForAllocation());
            }
            fromnick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            fromnick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (!from._internal_fromnick().empty())
            {
                fromnick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                              from._internal_fromnick(),
                              GetArenaForAllocation());
            }
            content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (!from._internal_content().empty())
            {
                content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                             from._internal_content(),
                             GetArenaForAllocation());
            }
            // @@protoc_insertion_point(copy_constructor:proto.response.Message)
        }

        inline void Message::SharedCtor()
        {
            rectime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            rectime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            fromnick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            fromnick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        }

        Message::~Message()
        {
            // @@protoc_insertion_point(destructor:proto.response.Message)
            if (GetArenaForAllocation() != nullptr) return;
            SharedDtor();
            _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        inline void Message::SharedDtor()
        {
            GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
            rectime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
            channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
            fromnick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
            content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        }

        void Message::ArenaDtor(void *object)
        {
            Message *_this = reinterpret_cast< Message * >(object);
            (void) _this;
        }

        void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
        {
        }

        void Message::SetCachedSize(int size) const
        {
            _cached_size_.Set(size);
        }

        void Message::Clear()
        {
// @@protoc_insertion_point(message_clear_start:proto.response.Message)
            uint32_t cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            rectime_.ClearToEmpty();
            channel_.ClearToEmpty();
            fromnick_.ClearToEmpty();
            content_.ClearToEmpty();
            _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        const char *Message::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
        {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
            while (!ctx->Done(&ptr))
            {
                uint32_t tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                switch (tag >> 3)
                {
                    // string recTime = 1;
                    case 1:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                        {
                            auto str = _internal_mutable_rectime();
                            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.response.Message.recTime"));
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                        // string channel = 2;
                    case 2:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18))
                        {
                            auto str = _internal_mutable_channel();
                            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.response.Message.channel"));
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                        // string fromNick = 3;
                    case 3:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                        {
                            auto str = _internal_mutable_fromnick();
                            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.response.Message.fromNick"));
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                        // string content = 4;
                    case 4:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34))
                        {
                            auto str = _internal_mutable_content();
                            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.response.Message.content"));
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                    default:
                        goto handle_unusual;
                }  // switch
                handle_unusual:
                if ((tag == 0) || ((tag & 7) == 4))
                {
                    CHK_(ptr);
                    ctx->SetLastTag(tag);
                    goto message_done;
                }
                ptr = UnknownFieldParse(
                        tag,
                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                        ptr, ctx);
                CHK_(ptr != nullptr);
            }  // while
            message_done:
            return ptr;
            failure:
            ptr = nullptr;
            goto message_done;
#undef CHK_
        }

        uint8_t *Message::_InternalSerialize(
                uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
        {
            // @@protoc_insertion_point(serialize_to_array_start:proto.response.Message)
            uint32_t cached_has_bits = 0;
            (void) cached_has_bits;

            // string recTime = 1;
            if (!this->_internal_rectime().empty())
            {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                        this->_internal_rectime().data(), static_cast<int>(this->_internal_rectime().length()),
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                        "proto.response.Message.recTime");
                target = stream->WriteStringMaybeAliased(
                        1, this->_internal_rectime(), target);
            }

            // string channel = 2;
            if (!this->_internal_channel().empty())
            {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                        this->_internal_channel().data(), static_cast<int>(this->_internal_channel().length()),
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                        "proto.response.Message.channel");
                target = stream->WriteStringMaybeAliased(
                        2, this->_internal_channel(), target);
            }

            // string fromNick = 3;
            if (!this->_internal_fromnick().empty())
            {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                        this->_internal_fromnick().data(), static_cast<int>(this->_internal_fromnick().length()),
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                        "proto.response.Message.fromNick");
                target = stream->WriteStringMaybeAliased(
                        3, this->_internal_fromnick(), target);
            }

            // string content = 4;
            if (!this->_internal_content().empty())
            {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                        this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                        "proto.response.Message.content");
                target = stream->WriteStringMaybeAliased(
                        4, this->_internal_content(), target);
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
            {
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
            }
            // @@protoc_insertion_point(serialize_to_array_end:proto.response.Message)
            return target;
        }

        size_t Message::ByteSizeLong() const
        {
// @@protoc_insertion_point(message_byte_size_start:proto.response.Message)
            size_t total_size = 0;

            uint32_t cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            // string recTime = 1;
            if (!this->_internal_rectime().empty())
            {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rectime());
            }

            // string channel = 2;
            if (!this->_internal_channel().empty())
            {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_channel());
            }

            // string fromNick = 3;
            if (!this->_internal_fromnick().empty())
            {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_fromnick());
            }

            // string content = 4;
            if (!this->_internal_content().empty())
            {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_content());
            }

            return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
        }

        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
                ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
                Message::MergeImpl
        };

        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *Message::GetClassData() const
        { return &_class_data_; }

        void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to,
                                const ::PROTOBUF_NAMESPACE_ID::Message &from)
        {
            static_cast<Message *>(to)->MergeFrom(
                    static_cast<const Message &>(from));
        }


        void Message::MergeFrom(const Message &from)
        {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.response.Message)
            GOOGLE_DCHECK_NE(&from, this);
            uint32_t cached_has_bits = 0;
            (void) cached_has_bits;

            if (!from._internal_rectime().empty())
            {
                _internal_set_rectime(from._internal_rectime());
            }
            if (!from._internal_channel().empty())
            {
                _internal_set_channel(from._internal_channel());
            }
            if (!from._internal_fromnick().empty())
            {
                _internal_set_fromnick(from._internal_fromnick());
            }
            if (!from._internal_content().empty())
            {
                _internal_set_content(from._internal_content());
            }
            _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        }

        void Message::CopyFrom(const Message &from)
        {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.response.Message)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool Message::IsInitialized() const
        {
            return true;
        }

        void Message::InternalSwap(Message *other)
        {
            using std::swap;
            auto *lhs_arena = GetArenaForAllocation();
            auto *rhs_arena = other->GetArenaForAllocation();
            _internal_metadata_.InternalSwap(&other->_internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                    &rectime_, lhs_arena,
                    &other->rectime_, rhs_arena
            );
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                    &channel_, lhs_arena,
                    &other->channel_, rhs_arena
            );
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                    &fromnick_, lhs_arena,
                    &other->fromnick_, rhs_arena
            );
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                    &content_, lhs_arena,
                    &other->content_, rhs_arena
            );
        }

        ::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const
        {
            return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                    &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
                    file_level_metadata_Response_2eproto[2]);
        }

// ===================================================================

        class ChannelInfo::_Internal
        {
        public:
        };

        ChannelInfo::ChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                                 bool is_message_owned)
                : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
        {
            SharedCtor();
            if (!is_message_owned)
            {
                RegisterArenaDtor(arena);
            }
            // @@protoc_insertion_point(arena_constructor:proto.response.ChannelInfo)
        }

        ChannelInfo::ChannelInfo(const ChannelInfo &from)
                : ::PROTOBUF_NAMESPACE_ID::Message()
        {
            _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
            name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (!from._internal_name().empty())
            {
                name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(),
                          GetArenaForAllocation());
            }
            ::memcpy(&ispublic_, &from.ispublic_,
                     static_cast<size_t>(reinterpret_cast<char *>(&membernum_) -
                                         reinterpret_cast<char *>(&ispublic_)) + sizeof(membernum_));
            // @@protoc_insertion_point(copy_constructor:proto.response.ChannelInfo)
        }

        inline void ChannelInfo::SharedCtor()
        {
            name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            ::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(
                             reinterpret_cast<char *>(&ispublic_) - reinterpret_cast<char *>(this)),
                     0, static_cast<size_t>(reinterpret_cast<char *>(&membernum_) -
                                            reinterpret_cast<char *>(&ispublic_)) + sizeof(membernum_));
        }

        ChannelInfo::~ChannelInfo()
        {
            // @@protoc_insertion_point(destructor:proto.response.ChannelInfo)
            if (GetArenaForAllocation() != nullptr) return;
            SharedDtor();
            _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        inline void ChannelInfo::SharedDtor()
        {
            GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
            name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        }

        void ChannelInfo::ArenaDtor(void *object)
        {
            ChannelInfo *_this = reinterpret_cast< ChannelInfo * >(object);
            (void) _this;
        }

        void ChannelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
        {
        }

        void ChannelInfo::SetCachedSize(int size) const
        {
            _cached_size_.Set(size);
        }

        void ChannelInfo::Clear()
        {
// @@protoc_insertion_point(message_clear_start:proto.response.ChannelInfo)
            uint32_t cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            name_.ClearToEmpty();
            ::memset(&ispublic_, 0, static_cast<size_t>(
                                            reinterpret_cast<char *>(&membernum_) -
                                            reinterpret_cast<char *>(&ispublic_)) + sizeof(membernum_));
            _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        const char *ChannelInfo::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
        {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
            while (!ctx->Done(&ptr))
            {
                uint32_t tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                switch (tag >> 3)
                {
                    // string name = 1;
                    case 1:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                        {
                            auto str = _internal_mutable_name();
                            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.response.ChannelInfo.name"));
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                        // bool isPublic = 2;
                    case 2:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                        {
                            ispublic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                        // int32 memberNum = 3;
                    case 3:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                        {
                            membernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                    default:
                        goto handle_unusual;
                }  // switch
                handle_unusual:
                if ((tag == 0) || ((tag & 7) == 4))
                {
                    CHK_(ptr);
                    ctx->SetLastTag(tag);
                    goto message_done;
                }
                ptr = UnknownFieldParse(
                        tag,
                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                        ptr, ctx);
                CHK_(ptr != nullptr);
            }  // while
            message_done:
            return ptr;
            failure:
            ptr = nullptr;
            goto message_done;
#undef CHK_
        }

        uint8_t *ChannelInfo::_InternalSerialize(
                uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
        {
            // @@protoc_insertion_point(serialize_to_array_start:proto.response.ChannelInfo)
            uint32_t cached_has_bits = 0;
            (void) cached_has_bits;

            // string name = 1;
            if (!this->_internal_name().empty())
            {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                        this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                        "proto.response.ChannelInfo.name");
                target = stream->WriteStringMaybeAliased(
                        1, this->_internal_name(), target);
            }

            // bool isPublic = 2;
            if (this->_internal_ispublic() != 0)
            {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2,
                                                                                             this->_internal_ispublic(),
                                                                                             target);
            }

            // int32 memberNum = 3;
            if (this->_internal_membernum() != 0)
            {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3,
                                                                                              this->_internal_membernum(),
                                                                                              target);
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
            {
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
            }
            // @@protoc_insertion_point(serialize_to_array_end:proto.response.ChannelInfo)
            return target;
        }

        size_t ChannelInfo::ByteSizeLong() const
        {
// @@protoc_insertion_point(message_byte_size_start:proto.response.ChannelInfo)
            size_t total_size = 0;

            uint32_t cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            // string name = 1;
            if (!this->_internal_name().empty())
            {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
            }

            // bool isPublic = 2;
            if (this->_internal_ispublic() != 0)
            {
                total_size += 1 + 1;
            }

            // int32 memberNum = 3;
            if (this->_internal_membernum() != 0)
            {
                total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(
                        this->_internal_membernum());
            }

            return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
        }

        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelInfo::_class_data_ = {
                ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
                ChannelInfo::MergeImpl
        };

        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *ChannelInfo::GetClassData() const
        { return &_class_data_; }

        void ChannelInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to,
                                    const ::PROTOBUF_NAMESPACE_ID::Message &from)
        {
            static_cast<ChannelInfo *>(to)->MergeFrom(
                    static_cast<const ChannelInfo &>(from));
        }


        void ChannelInfo::MergeFrom(const ChannelInfo &from)
        {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.response.ChannelInfo)
            GOOGLE_DCHECK_NE(&from, this);
            uint32_t cached_has_bits = 0;
            (void) cached_has_bits;

            if (!from._internal_name().empty())
            {
                _internal_set_name(from._internal_name());
            }
            if (from._internal_ispublic() != 0)
            {
                _internal_set_ispublic(from._internal_ispublic());
            }
            if (from._internal_membernum() != 0)
            {
                _internal_set_membernum(from._internal_membernum());
            }
            _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        }

        void ChannelInfo::CopyFrom(const ChannelInfo &from)
        {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.response.ChannelInfo)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool ChannelInfo::IsInitialized() const
        {
            return true;
        }

        void ChannelInfo::InternalSwap(ChannelInfo *other)
        {
            using std::swap;
            auto *lhs_arena = GetArenaForAllocation();
            auto *rhs_arena = other->GetArenaForAllocation();
            _internal_metadata_.InternalSwap(&other->_internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                    &name_, lhs_arena,
                    &other->name_, rhs_arena
            );
            ::PROTOBUF_NAMESPACE_ID::internal::memswap<
                    PROTOBUF_FIELD_OFFSET(ChannelInfo, membernum_)
                    + sizeof(ChannelInfo::membernum_)
                    - PROTOBUF_FIELD_OFFSET(ChannelInfo, ispublic_)>(
                    reinterpret_cast<char *>(&ispublic_),
                    reinterpret_cast<char *>(&other->ispublic_));
        }

        ::PROTOBUF_NAMESPACE_ID::Metadata ChannelInfo::GetMetadata() const
        {
            return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                    &descriptor_table_Response_2eproto_getter, &descriptor_table_Response_2eproto_once,
                    file_level_metadata_Response_2eproto[3]);
        }

// @@protoc_insertion_point(namespace_scope)
    }  // namespace response
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
        template<>
        PROTOBUF_NOINLINE ::proto::response::ResponsePOJO *
        Arena::CreateMaybeMessage<::proto::response::ResponsePOJO>(Arena *arena)
        {
            return Arena::CreateMessageInternal<::proto::response::ResponsePOJO>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::proto::response::Result *Arena::CreateMaybeMessage<::proto::response::Result>(Arena *arena)
        {
            return Arena::CreateMessageInternal<::proto::response::Result>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::proto::response::Message *
        Arena::CreateMaybeMessage<::proto::response::Message>(Arena *arena)
        {
            return Arena::CreateMessageInternal<::proto::response::Message>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::proto::response::ChannelInfo *
        Arena::CreateMaybeMessage<::proto::response::ChannelInfo>(Arena *arena)
        {
            return Arena::CreateMessageInternal<::proto::response::ChannelInfo>(arena);
        }
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
