// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Request.proto

#include "Request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto
{
    namespace request
    {
        constexpr RequestPOJO::RequestPOJO(
                ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
                : message_(nullptr), channel_(nullptr), operation_(0)
        {}

        struct RequestPOJODefaultTypeInternal
        {
            constexpr RequestPOJODefaultTypeInternal()
                    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
            {}

            ~RequestPOJODefaultTypeInternal()
            {}

            union
            {
                RequestPOJO _instance;
            };
        };

        PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestPOJODefaultTypeInternal _RequestPOJO_default_instance_;

        constexpr Channel::Channel(
                ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
                : channel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
                  ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
                  nick_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
        {}

        struct ChannelDefaultTypeInternal
        {
            constexpr ChannelDefaultTypeInternal()
                    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
            {}

            ~ChannelDefaultTypeInternal()
            {}

            union
            {
                Channel _instance;
            };
        };

        PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelDefaultTypeInternal _Channel_default_instance_;

        constexpr Message::Message(
                ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
                : channel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
                  content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
        {}

        struct MessageDefaultTypeInternal
        {
            constexpr MessageDefaultTypeInternal()
                    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
            {}

            ~MessageDefaultTypeInternal()
            {}

            union
            {
                Message _instance;
            };
        };

        PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageDefaultTypeInternal _Message_default_instance_;
    }  // namespace request
}  // namespace proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Request_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *file_level_enum_descriptors_Request_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_Request_2eproto = nullptr;

const uint32_t TableStruct_Request_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::proto::request::RequestPOJO, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::proto::request::RequestPOJO, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::proto::request::RequestPOJO, operation_),
        PROTOBUF_FIELD_OFFSET(::proto::request::RequestPOJO, message_),
        PROTOBUF_FIELD_OFFSET(::proto::request::RequestPOJO, channel_),
        ~0u,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::proto::request::Channel, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::proto::request::Channel, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::proto::request::Channel, channel_),
        PROTOBUF_FIELD_OFFSET(::proto::request::Channel, ticket_),
        PROTOBUF_FIELD_OFFSET(::proto::request::Channel, nick_),
        ~0u,
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::proto::request::Message, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::proto::request::Message, channel_),
        PROTOBUF_FIELD_OFFSET(::proto::request::Message, content_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0,  9,  -1, sizeof(::proto::request::RequestPOJO)},
        {12, 21, -1, sizeof(::proto::request::Channel)},
        {24, -1, -1, sizeof(::proto::request::Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::proto::request::_RequestPOJO_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::proto::request::_Channel_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::proto::request::_Message_default_instance_),
};

const char descriptor_table_protodef_Request_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
        "\n\rRequest.proto\022\rproto.request\"\354\002\n\013Reque"
        "stPOJO\0227\n\toperation\030\001 \001(\0162$.proto.reques"
        "t.RequestPOJO.Operation\022,\n\007message\030\002 \001(\013"
        "2\026.proto.request.MessageH\000\210\001\001\022,\n\007channel"
        "\030\003 \001(\0132\026.proto.request.ChannelH\001\210\001\001\"\257\001\n\t"
        "Operation\022\n\n\006RETAIN\020\000\022\n\n\006LOGOUT\020\001\022\014\n\010JOI"
        "N_CHA\020\002\022\014\n\010QUIT_CHA\020\003\022\016\n\nCREATE_CHA\020\004\022\013\n"
        "\007SENDMSG\020\005\022\n\n\006GETMSG\020\006\022\r\n\tHEARTBEAT\020\007\022\013\n"
        "\007VERSION\020\010\022\024\n\020GET_CHANNEL_LIST\020\t\022\023\n\017GET_"
        "MEMBER_LIST\020\nB\n\n\010_messageB\n\n\010_channel\"V\n"
        "\007Channel\022\017\n\007channel\030\001 \001(\t\022\023\n\006ticket\030\002 \001("
        "\tH\000\210\001\001\022\021\n\004nick\030\003 \001(\tH\001\210\001\001B\t\n\007_ticketB\007\n\005"
        "_nick\"+\n\007Message\022\017\n\007channel\030\001 \001(\t\022\017\n\007con"
        "tent\030\003 \001(\tB\002H\001b\006proto3";
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Request_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Request_2eproto = {
        false, false, 542, descriptor_table_protodef_Request_2eproto, "Request.proto",
        &descriptor_table_Request_2eproto_once, nullptr, 0, 3,
        schemas, file_default_instances, TableStruct_Request_2eproto::offsets,
        file_level_metadata_Request_2eproto, file_level_enum_descriptors_Request_2eproto,
        file_level_service_descriptors_Request_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *
descriptor_table_Request_2eproto_getter()
{
    return &descriptor_table_Request_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Request_2eproto(
        &descriptor_table_Request_2eproto);
namespace proto
{
    namespace request
    {
        const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *RequestPOJO_Operation_descriptor()
        {
            ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Request_2eproto);
            return file_level_enum_descriptors_Request_2eproto[0];
        }

        bool RequestPOJO_Operation_IsValid(int value)
        {
            switch (value)
            {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                    return true;
                default:
                    return false;
            }
        }

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
        constexpr RequestPOJO_Operation RequestPOJO::RETAIN;
        constexpr RequestPOJO_Operation RequestPOJO::LOGOUT;
        constexpr RequestPOJO_Operation RequestPOJO::JOIN_CHA;
        constexpr RequestPOJO_Operation RequestPOJO::QUIT_CHA;
        constexpr RequestPOJO_Operation RequestPOJO::CREATE_CHA;
        constexpr RequestPOJO_Operation RequestPOJO::SENDMSG;
        constexpr RequestPOJO_Operation RequestPOJO::GETMSG;
        constexpr RequestPOJO_Operation RequestPOJO::HEARTBEAT;
        constexpr RequestPOJO_Operation RequestPOJO::VERSION;
        constexpr RequestPOJO_Operation RequestPOJO::GET_CHANNEL_LIST;
        constexpr RequestPOJO_Operation RequestPOJO::GET_MEMBER_LIST;
        constexpr RequestPOJO_Operation RequestPOJO::Operation_MIN;
        constexpr RequestPOJO_Operation RequestPOJO::Operation_MAX;
        constexpr int RequestPOJO::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

        class RequestPOJO::_Internal
        {
        public:
            using HasBits = decltype(std::declval<RequestPOJO>()._has_bits_);

            static const ::proto::request::Message &message(const RequestPOJO *msg);

            static void set_has_message(HasBits *has_bits)
            {
                (*has_bits)[0] |= 1u;
            }

            static const ::proto::request::Channel &channel(const RequestPOJO *msg);

            static void set_has_channel(HasBits *has_bits)
            {
                (*has_bits)[0] |= 2u;
            }
        };

        const ::proto::request::Message &
        RequestPOJO::_Internal::message(const RequestPOJO *msg)
        {
            return *msg->message_;
        }

        const ::proto::request::Channel &
        RequestPOJO::_Internal::channel(const RequestPOJO *msg)
        {
            return *msg->channel_;
        }

        RequestPOJO::RequestPOJO(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                                 bool is_message_owned)
                : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
        {
            SharedCtor();
            if (!is_message_owned)
            {
                RegisterArenaDtor(arena);
            }
            // @@protoc_insertion_point(arena_constructor:proto.request.RequestPOJO)
        }

        RequestPOJO::RequestPOJO(const RequestPOJO &from)
                : ::PROTOBUF_NAMESPACE_ID::Message(),
                  _has_bits_(from._has_bits_)
        {
            _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
            if (from._internal_has_message())
            {
                message_ = new ::proto::request::Message(*from.message_);
            } else
            {
                message_ = nullptr;
            }
            if (from._internal_has_channel())
            {
                channel_ = new ::proto::request::Channel(*from.channel_);
            } else
            {
                channel_ = nullptr;
            }
            operation_ = from.operation_;
            // @@protoc_insertion_point(copy_constructor:proto.request.RequestPOJO)
        }

        inline void RequestPOJO::SharedCtor()
        {
            ::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(
                             reinterpret_cast<char *>(&message_) - reinterpret_cast<char *>(this)),
                     0, static_cast<size_t>(reinterpret_cast<char *>(&operation_) -
                                            reinterpret_cast<char *>(&message_)) + sizeof(operation_));
        }

        RequestPOJO::~RequestPOJO()
        {
            // @@protoc_insertion_point(destructor:proto.request.RequestPOJO)
            if (GetArenaForAllocation() != nullptr) return;
            SharedDtor();
            _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        inline void RequestPOJO::SharedDtor()
        {
            GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
            if (this != internal_default_instance()) delete message_;
            if (this != internal_default_instance()) delete channel_;
        }

        void RequestPOJO::ArenaDtor(void *object)
        {
            RequestPOJO *_this = reinterpret_cast< RequestPOJO * >(object);
            (void) _this;
        }

        void RequestPOJO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
        {
        }

        void RequestPOJO::SetCachedSize(int size) const
        {
            _cached_size_.Set(size);
        }

        void RequestPOJO::Clear()
        {
// @@protoc_insertion_point(message_clear_start:proto.request.RequestPOJO)
            uint32_t cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000003u)
            {
                if (cached_has_bits & 0x00000001u)
                {
                    GOOGLE_DCHECK(message_ != nullptr);
                    message_->Clear();
                }
                if (cached_has_bits & 0x00000002u)
                {
                    GOOGLE_DCHECK(channel_ != nullptr);
                    channel_->Clear();
                }
            }
            operation_ = 0;
            _has_bits_.Clear();
            _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        const char *RequestPOJO::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
        {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
            _Internal::HasBits has_bits{};
            while (!ctx->Done(&ptr))
            {
                uint32_t tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                switch (tag >> 3)
                {
                    // .proto.request.RequestPOJO.Operation operation = 1;
                    case 1:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                        {
                            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                            CHK_(ptr);
                            _internal_set_operation(static_cast<::proto::request::RequestPOJO_Operation>(val));
                        } else
                            goto handle_unusual;
                        continue;
                        // optional .proto.request.Message message = 2;
                    case 2:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18))
                        {
                            ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                        // optional .proto.request.Channel channel = 3;
                    case 3:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                        {
                            ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                    default:
                        goto handle_unusual;
                }  // switch
                handle_unusual:
                if ((tag == 0) || ((tag & 7) == 4))
                {
                    CHK_(ptr);
                    ctx->SetLastTag(tag);
                    goto message_done;
                }
                ptr = UnknownFieldParse(
                        tag,
                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                        ptr, ctx);
                CHK_(ptr != nullptr);
            }  // while
            message_done:
            _has_bits_.Or(has_bits);
            return ptr;
            failure:
            ptr = nullptr;
            goto message_done;
#undef CHK_
        }

        uint8_t *RequestPOJO::_InternalSerialize(
                uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
        {
            // @@protoc_insertion_point(serialize_to_array_start:proto.request.RequestPOJO)
            uint32_t cached_has_bits = 0;
            (void) cached_has_bits;

            // .proto.request.RequestPOJO.Operation operation = 1;
            if (this->_internal_operation() != 0)
            {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
                        1, this->_internal_operation(), target);
            }

            // optional .proto.request.Message message = 2;
            if (_internal_has_message())
            {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(
                        2, _Internal::message(this), target, stream);
            }

            // optional .proto.request.Channel channel = 3;
            if (_internal_has_channel())
            {
                target = stream->EnsureSpace(target);
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(
                        3, _Internal::channel(this), target, stream);
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
            {
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
            }
            // @@protoc_insertion_point(serialize_to_array_end:proto.request.RequestPOJO)
            return target;
        }

        size_t RequestPOJO::ByteSizeLong() const
        {
// @@protoc_insertion_point(message_byte_size_start:proto.request.RequestPOJO)
            size_t total_size = 0;

            uint32_t cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000003u)
            {
                // optional .proto.request.Message message = 2;
                if (cached_has_bits & 0x00000001u)
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                          *message_);
                }

                // optional .proto.request.Channel channel = 3;
                if (cached_has_bits & 0x00000002u)
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                          *channel_);
                }

            }
            // .proto.request.RequestPOJO.Operation operation = 1;
            if (this->_internal_operation() != 0)
            {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
            }

            return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
        }

        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestPOJO::_class_data_ = {
                ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
                RequestPOJO::MergeImpl
        };

        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *RequestPOJO::GetClassData() const
        { return &_class_data_; }

        void RequestPOJO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to,
                                    const ::PROTOBUF_NAMESPACE_ID::Message &from)
        {
            static_cast<RequestPOJO *>(to)->MergeFrom(
                    static_cast<const RequestPOJO &>(from));
        }


        void RequestPOJO::MergeFrom(const RequestPOJO &from)
        {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.request.RequestPOJO)
            GOOGLE_DCHECK_NE(&from, this);
            uint32_t cached_has_bits = 0;
            (void) cached_has_bits;

            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 0x00000003u)
            {
                if (cached_has_bits & 0x00000001u)
                {
                    _internal_mutable_message()->::proto::request::Message::MergeFrom(from._internal_message());
                }
                if (cached_has_bits & 0x00000002u)
                {
                    _internal_mutable_channel()->::proto::request::Channel::MergeFrom(from._internal_channel());
                }
            }
            if (from._internal_operation() != 0)
            {
                _internal_set_operation(from._internal_operation());
            }
            _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        }

        void RequestPOJO::CopyFrom(const RequestPOJO &from)
        {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.request.RequestPOJO)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RequestPOJO::IsInitialized() const
        {
            return true;
        }

        void RequestPOJO::InternalSwap(RequestPOJO *other)
        {
            using std::swap;
            _internal_metadata_.InternalSwap(&other->_internal_metadata_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            ::PROTOBUF_NAMESPACE_ID::internal::memswap<
                    PROTOBUF_FIELD_OFFSET(RequestPOJO, operation_)
                    + sizeof(RequestPOJO::operation_)
                    - PROTOBUF_FIELD_OFFSET(RequestPOJO, message_)>(
                    reinterpret_cast<char *>(&message_),
                    reinterpret_cast<char *>(&other->message_));
        }

        ::PROTOBUF_NAMESPACE_ID::Metadata RequestPOJO::GetMetadata() const
        {
            return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                    &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
                    file_level_metadata_Request_2eproto[0]);
        }

// ===================================================================

        class Channel::_Internal
        {
        public:
            using HasBits = decltype(std::declval<Channel>()._has_bits_);

            static void set_has_ticket(HasBits *has_bits)
            {
                (*has_bits)[0] |= 1u;
            }

            static void set_has_nick(HasBits *has_bits)
            {
                (*has_bits)[0] |= 2u;
            }
        };

        Channel::Channel(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                         bool is_message_owned)
                : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
        {
            SharedCtor();
            if (!is_message_owned)
            {
                RegisterArenaDtor(arena);
            }
            // @@protoc_insertion_point(arena_constructor:proto.request.Channel)
        }

        Channel::Channel(const Channel &from)
                : ::PROTOBUF_NAMESPACE_ID::Message(),
                  _has_bits_(from._has_bits_)
        {
            _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
            channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (!from._internal_channel().empty())
            {
                channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                             from._internal_channel(),
                             GetArenaForAllocation());
            }
            ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (from._internal_has_ticket())
            {
                ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(),
                            GetArenaForAllocation());
            }
            nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            nick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (from._internal_has_nick())
            {
                nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick(),
                          GetArenaForAllocation());
            }
            // @@protoc_insertion_point(copy_constructor:proto.request.Channel)
        }

        inline void Channel::SharedCtor()
        {
            channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            nick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        }

        Channel::~Channel()
        {
            // @@protoc_insertion_point(destructor:proto.request.Channel)
            if (GetArenaForAllocation() != nullptr) return;
            SharedDtor();
            _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        inline void Channel::SharedDtor()
        {
            GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
            channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
            ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
            nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        }

        void Channel::ArenaDtor(void *object)
        {
            Channel *_this = reinterpret_cast< Channel * >(object);
            (void) _this;
        }

        void Channel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
        {
        }

        void Channel::SetCachedSize(int size) const
        {
            _cached_size_.Set(size);
        }

        void Channel::Clear()
        {
// @@protoc_insertion_point(message_clear_start:proto.request.Channel)
            uint32_t cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            channel_.ClearToEmpty();
            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000003u)
            {
                if (cached_has_bits & 0x00000001u)
                {
                    ticket_.ClearNonDefaultToEmpty();
                }
                if (cached_has_bits & 0x00000002u)
                {
                    nick_.ClearNonDefaultToEmpty();
                }
            }
            _has_bits_.Clear();
            _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        const char *Channel::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
        {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
            _Internal::HasBits has_bits{};
            while (!ctx->Done(&ptr))
            {
                uint32_t tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                switch (tag >> 3)
                {
                    // string channel = 1;
                    case 1:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                        {
                            auto str = _internal_mutable_channel();
                            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.request.Channel.channel"));
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                        // optional string ticket = 2;
                    case 2:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18))
                        {
                            auto str = _internal_mutable_ticket();
                            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.request.Channel.ticket"));
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                        // optional string nick = 3;
                    case 3:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                        {
                            auto str = _internal_mutable_nick();
                            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.request.Channel.nick"));
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                    default:
                        goto handle_unusual;
                }  // switch
                handle_unusual:
                if ((tag == 0) || ((tag & 7) == 4))
                {
                    CHK_(ptr);
                    ctx->SetLastTag(tag);
                    goto message_done;
                }
                ptr = UnknownFieldParse(
                        tag,
                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                        ptr, ctx);
                CHK_(ptr != nullptr);
            }  // while
            message_done:
            _has_bits_.Or(has_bits);
            return ptr;
            failure:
            ptr = nullptr;
            goto message_done;
#undef CHK_
        }

        uint8_t *Channel::_InternalSerialize(
                uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
        {
            // @@protoc_insertion_point(serialize_to_array_start:proto.request.Channel)
            uint32_t cached_has_bits = 0;
            (void) cached_has_bits;

            // string channel = 1;
            if (!this->_internal_channel().empty())
            {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                        this->_internal_channel().data(), static_cast<int>(this->_internal_channel().length()),
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                        "proto.request.Channel.channel");
                target = stream->WriteStringMaybeAliased(
                        1, this->_internal_channel(), target);
            }

            // optional string ticket = 2;
            if (_internal_has_ticket())
            {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                        this->_internal_ticket().data(), static_cast<int>(this->_internal_ticket().length()),
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                        "proto.request.Channel.ticket");
                target = stream->WriteStringMaybeAliased(
                        2, this->_internal_ticket(), target);
            }

            // optional string nick = 3;
            if (_internal_has_nick())
            {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                        this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                        "proto.request.Channel.nick");
                target = stream->WriteStringMaybeAliased(
                        3, this->_internal_nick(), target);
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
            {
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
            }
            // @@protoc_insertion_point(serialize_to_array_end:proto.request.Channel)
            return target;
        }

        size_t Channel::ByteSizeLong() const
        {
// @@protoc_insertion_point(message_byte_size_start:proto.request.Channel)
            size_t total_size = 0;

            uint32_t cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            // string channel = 1;
            if (!this->_internal_channel().empty())
            {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_channel());
            }

            cached_has_bits = _has_bits_[0];
            if (cached_has_bits & 0x00000003u)
            {
                // optional string ticket = 2;
                if (cached_has_bits & 0x00000001u)
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                          this->_internal_ticket());
                }

                // optional string nick = 3;
                if (cached_has_bits & 0x00000002u)
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                          this->_internal_nick());
                }

            }
            return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
        }

        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Channel::_class_data_ = {
                ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
                Channel::MergeImpl
        };

        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *Channel::GetClassData() const
        { return &_class_data_; }

        void Channel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to,
                                const ::PROTOBUF_NAMESPACE_ID::Message &from)
        {
            static_cast<Channel *>(to)->MergeFrom(
                    static_cast<const Channel &>(from));
        }


        void Channel::MergeFrom(const Channel &from)
        {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.request.Channel)
            GOOGLE_DCHECK_NE(&from, this);
            uint32_t cached_has_bits = 0;
            (void) cached_has_bits;

            if (!from._internal_channel().empty())
            {
                _internal_set_channel(from._internal_channel());
            }
            cached_has_bits = from._has_bits_[0];
            if (cached_has_bits & 0x00000003u)
            {
                if (cached_has_bits & 0x00000001u)
                {
                    _internal_set_ticket(from._internal_ticket());
                }
                if (cached_has_bits & 0x00000002u)
                {
                    _internal_set_nick(from._internal_nick());
                }
            }
            _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        }

        void Channel::CopyFrom(const Channel &from)
        {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.request.Channel)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool Channel::IsInitialized() const
        {
            return true;
        }

        void Channel::InternalSwap(Channel *other)
        {
            using std::swap;
            auto *lhs_arena = GetArenaForAllocation();
            auto *rhs_arena = other->GetArenaForAllocation();
            _internal_metadata_.InternalSwap(&other->_internal_metadata_);
            swap(_has_bits_[0], other->_has_bits_[0]);
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                    &channel_, lhs_arena,
                    &other->channel_, rhs_arena
            );
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                    &ticket_, lhs_arena,
                    &other->ticket_, rhs_arena
            );
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                    &nick_, lhs_arena,
                    &other->nick_, rhs_arena
            );
        }

        ::PROTOBUF_NAMESPACE_ID::Metadata Channel::GetMetadata() const
        {
            return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                    &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
                    file_level_metadata_Request_2eproto[1]);
        }

// ===================================================================

        class Message::_Internal
        {
        public:
        };

        Message::Message(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                         bool is_message_owned)
                : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
        {
            SharedCtor();
            if (!is_message_owned)
            {
                RegisterArenaDtor(arena);
            }
            // @@protoc_insertion_point(arena_constructor:proto.request.Message)
        }

        Message::Message(const Message &from)
                : ::PROTOBUF_NAMESPACE_ID::Message()
        {
            _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
            channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (!from._internal_channel().empty())
            {
                channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                             from._internal_channel(),
                             GetArenaForAllocation());
            }
            content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (!from._internal_content().empty())
            {
                content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                             from._internal_content(),
                             GetArenaForAllocation());
            }
            // @@protoc_insertion_point(copy_constructor:proto.request.Message)
        }

        inline void Message::SharedCtor()
        {
            channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        }

        Message::~Message()
        {
            // @@protoc_insertion_point(destructor:proto.request.Message)
            if (GetArenaForAllocation() != nullptr) return;
            SharedDtor();
            _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        inline void Message::SharedDtor()
        {
            GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
            channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
            content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        }

        void Message::ArenaDtor(void *object)
        {
            Message *_this = reinterpret_cast< Message * >(object);
            (void) _this;
        }

        void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
        {
        }

        void Message::SetCachedSize(int size) const
        {
            _cached_size_.Set(size);
        }

        void Message::Clear()
        {
// @@protoc_insertion_point(message_clear_start:proto.request.Message)
            uint32_t cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            channel_.ClearToEmpty();
            content_.ClearToEmpty();
            _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        const char *Message::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
        {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
            while (!ctx->Done(&ptr))
            {
                uint32_t tag;
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
                switch (tag >> 3)
                {
                    // string channel = 1;
                    case 1:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                        {
                            auto str = _internal_mutable_channel();
                            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.request.Message.channel"));
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                        // string content = 3;
                    case 3:
                        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                        {
                            auto str = _internal_mutable_content();
                            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.request.Message.content"));
                            CHK_(ptr);
                        } else
                            goto handle_unusual;
                        continue;
                    default:
                        goto handle_unusual;
                }  // switch
                handle_unusual:
                if ((tag == 0) || ((tag & 7) == 4))
                {
                    CHK_(ptr);
                    ctx->SetLastTag(tag);
                    goto message_done;
                }
                ptr = UnknownFieldParse(
                        tag,
                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                        ptr, ctx);
                CHK_(ptr != nullptr);
            }  // while
            message_done:
            return ptr;
            failure:
            ptr = nullptr;
            goto message_done;
#undef CHK_
        }

        uint8_t *Message::_InternalSerialize(
                uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
        {
            // @@protoc_insertion_point(serialize_to_array_start:proto.request.Message)
            uint32_t cached_has_bits = 0;
            (void) cached_has_bits;

            // string channel = 1;
            if (!this->_internal_channel().empty())
            {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                        this->_internal_channel().data(), static_cast<int>(this->_internal_channel().length()),
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                        "proto.request.Message.channel");
                target = stream->WriteStringMaybeAliased(
                        1, this->_internal_channel(), target);
            }

            // string content = 3;
            if (!this->_internal_content().empty())
            {
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                        this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
                        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                        "proto.request.Message.content");
                target = stream->WriteStringMaybeAliased(
                        3, this->_internal_content(), target);
            }

            if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
            {
                target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
            }
            // @@protoc_insertion_point(serialize_to_array_end:proto.request.Message)
            return target;
        }

        size_t Message::ByteSizeLong() const
        {
// @@protoc_insertion_point(message_byte_size_start:proto.request.Message)
            size_t total_size = 0;

            uint32_t cached_has_bits = 0;
            // Prevent compiler warnings about cached_has_bits being unused
            (void) cached_has_bits;

            // string channel = 1;
            if (!this->_internal_channel().empty())
            {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_channel());
            }

            // string content = 3;
            if (!this->_internal_content().empty())
            {
                total_size += 1 +
                              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_content());
            }

            return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
        }

        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
                ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
                Message::MergeImpl
        };

        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *Message::GetClassData() const
        { return &_class_data_; }

        void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to,
                                const ::PROTOBUF_NAMESPACE_ID::Message &from)
        {
            static_cast<Message *>(to)->MergeFrom(
                    static_cast<const Message &>(from));
        }


        void Message::MergeFrom(const Message &from)
        {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.request.Message)
            GOOGLE_DCHECK_NE(&from, this);
            uint32_t cached_has_bits = 0;
            (void) cached_has_bits;

            if (!from._internal_channel().empty())
            {
                _internal_set_channel(from._internal_channel());
            }
            if (!from._internal_content().empty())
            {
                _internal_set_content(from._internal_content());
            }
            _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        }

        void Message::CopyFrom(const Message &from)
        {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.request.Message)
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool Message::IsInitialized() const
        {
            return true;
        }

        void Message::InternalSwap(Message *other)
        {
            using std::swap;
            auto *lhs_arena = GetArenaForAllocation();
            auto *rhs_arena = other->GetArenaForAllocation();
            _internal_metadata_.InternalSwap(&other->_internal_metadata_);
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                    &channel_, lhs_arena,
                    &other->channel_, rhs_arena
            );
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
                    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                    &content_, lhs_arena,
                    &other->content_, rhs_arena
            );
        }

        ::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const
        {
            return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
                    &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
                    file_level_metadata_Request_2eproto[2]);
        }

// @@protoc_insertion_point(namespace_scope)
    }  // namespace request
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
        template<>
        PROTOBUF_NOINLINE ::proto::request::RequestPOJO *
        Arena::CreateMaybeMessage<::proto::request::RequestPOJO>(Arena *arena)
        {
            return Arena::CreateMessageInternal<::proto::request::RequestPOJO>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::proto::request::Channel *Arena::CreateMaybeMessage<::proto::request::Channel>(Arena *arena)
        {
            return Arena::CreateMessageInternal<::proto::request::Channel>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::proto::request::Message *Arena::CreateMaybeMessage<::proto::request::Message>(Arena *arena)
        {
            return Arena::CreateMessageInternal<::proto::request::Message>(arena);
        }
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
