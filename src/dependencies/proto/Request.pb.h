// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Request_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Request_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>

#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

#define PROTOBUF_INTERNAL_EXPORT_Request_2eproto
PROTOBUF_NAMESPACE_OPEN
        namespace internal
        {
            class AnyMetadata;
        }  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Request_2eproto
{
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Request_2eproto;
namespace proto
{
    namespace request
    {
        class Channel;

        struct ChannelDefaultTypeInternal;
        extern ChannelDefaultTypeInternal _Channel_default_instance_;

        class Message;

        struct MessageDefaultTypeInternal;
        extern MessageDefaultTypeInternal _Message_default_instance_;

        class RequestPOJO;

        struct RequestPOJODefaultTypeInternal;
        extern RequestPOJODefaultTypeInternal _RequestPOJO_default_instance_;
    }  // namespace request
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
        template<>
        ::proto::request::Channel *Arena::CreateMaybeMessage<::proto::request::Channel>(Arena *);

        template<>
        ::proto::request::Message *Arena::CreateMaybeMessage<::proto::request::Message>(Arena *);

        template<>
        ::proto::request::RequestPOJO *Arena::CreateMaybeMessage<::proto::request::RequestPOJO>(Arena *);
PROTOBUF_NAMESPACE_CLOSE
namespace proto
{
    namespace request
    {

        enum RequestPOJO_Operation : int
        {
            RequestPOJO_Operation_RETAIN = 0,
            RequestPOJO_Operation_LOGOUT = 1,
            RequestPOJO_Operation_JOIN_CHA = 2,
            RequestPOJO_Operation_QUIT_CHA = 3,
            RequestPOJO_Operation_CREATE_CHA = 4,
            RequestPOJO_Operation_SENDMSG = 5,
            RequestPOJO_Operation_GETMSG = 6,
            RequestPOJO_Operation_HEARTBEAT = 7,
            RequestPOJO_Operation_VERSION = 8,
            RequestPOJO_Operation_GET_CHANNEL_LIST = 9,
            RequestPOJO_Operation_GET_MEMBER_LIST = 10,
            RequestPOJO_Operation_RequestPOJO_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
            RequestPOJO_Operation_RequestPOJO_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
        };

        bool RequestPOJO_Operation_IsValid(int value);

        constexpr RequestPOJO_Operation RequestPOJO_Operation_Operation_MIN = RequestPOJO_Operation_RETAIN;
        constexpr RequestPOJO_Operation RequestPOJO_Operation_Operation_MAX = RequestPOJO_Operation_GET_MEMBER_LIST;
        constexpr int RequestPOJO_Operation_Operation_ARRAYSIZE = RequestPOJO_Operation_Operation_MAX + 1;

        const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *RequestPOJO_Operation_descriptor();

        template<typename T>
        inline const std::string &RequestPOJO_Operation_Name(T enum_t_value)
        {
            static_assert(::std::is_same<T, RequestPOJO_Operation>::value ||
                          ::std::is_integral<T>::value,
                          "Incorrect type passed to function RequestPOJO_Operation_Name.");
            return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
                    RequestPOJO_Operation_descriptor(), enum_t_value);
        }

        inline bool RequestPOJO_Operation_Parse(
                ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RequestPOJO_Operation *value)
        {
            return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestPOJO_Operation>(
                    RequestPOJO_Operation_descriptor(), name, value);
        }
// ===================================================================

        class RequestPOJO final :
                public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.request.RequestPOJO) */ {
        public:
            inline RequestPOJO() : RequestPOJO(nullptr)
            {}

            ~RequestPOJO() override;

            explicit constexpr RequestPOJO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

            RequestPOJO(const RequestPOJO &from);

            RequestPOJO(RequestPOJO &&from) noexcept
                    : RequestPOJO()
            {
                *this = ::std::move(from);
            }

            inline RequestPOJO &operator=(const RequestPOJO &from)
            {
                CopyFrom(from);
                return *this;
            }

            inline RequestPOJO &operator=(RequestPOJO &&from) noexcept
            {
                if (this == &from) return *this;
                if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                    && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                        )
                {
                    InternalSwap(&from);
                } else
                {
                    CopyFrom(from);
                }
                return *this;
            }

            static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor()
            {
                return GetDescriptor();
            }

            static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor()
            {
                return default_instance().GetMetadata().descriptor;
            }

            static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection()
            {
                return default_instance().GetMetadata().reflection;
            }

            static const RequestPOJO &default_instance()
            {
                return *internal_default_instance();
            }

            static inline const RequestPOJO *internal_default_instance()
            {
                return reinterpret_cast<const RequestPOJO *>(
                        &_RequestPOJO_default_instance_);
            }

            static constexpr int kIndexInFileMessages =
                    0;

            friend void swap(RequestPOJO &a, RequestPOJO &b)
            {
                a.Swap(&b);
            }

            inline void Swap(RequestPOJO *other)
            {
                if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
                if (GetOwningArena() != nullptr &&
                    GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
                if (GetOwningArena() == other->GetOwningArena())
                {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                    InternalSwap(other);
                } else
                {
                    ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
                }
            }

            void UnsafeArenaSwap(RequestPOJO *other)
            {
                if (other == this) return;
                GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
                InternalSwap(other);
            }

            // implements Message ----------------------------------------------

            RequestPOJO *New(::PROTOBUF_NAMESPACE_ID::Arena *arena = nullptr) const final
            {
                return CreateMaybeMessage<RequestPOJO>(arena);
            }

            using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;

            void CopyFrom(const RequestPOJO &from);

            using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;

            void MergeFrom(const RequestPOJO &from);

        private:
            static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to, const ::PROTOBUF_NAMESPACE_ID::Message &from);

        public:
            PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

            bool IsInitialized() const final;

            size_t ByteSizeLong() const final;

            const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

            uint8_t *_InternalSerialize(
                    uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

            int GetCachedSize() const final
            { return _cached_size_.Get(); }

        private:
            void SharedCtor();

            void SharedDtor();

            void SetCachedSize(int size) const final;

            void InternalSwap(RequestPOJO *other);

        private:
            friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

            static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
            {
                return "proto.request.RequestPOJO";
            }

        protected:
            explicit RequestPOJO(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                                 bool is_message_owned = false);

        private:
            static void ArenaDtor(void *object);

            inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

        public:

            static const ClassData _class_data_;

            const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *GetClassData() const final;

            ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

            // nested types ----------------------------------------------------

            typedef RequestPOJO_Operation Operation;
            static constexpr Operation RETAIN =
                    RequestPOJO_Operation_RETAIN;
            static constexpr Operation LOGOUT =
                    RequestPOJO_Operation_LOGOUT;
            static constexpr Operation JOIN_CHA =
                    RequestPOJO_Operation_JOIN_CHA;
            static constexpr Operation QUIT_CHA =
                    RequestPOJO_Operation_QUIT_CHA;
            static constexpr Operation CREATE_CHA =
                    RequestPOJO_Operation_CREATE_CHA;
            static constexpr Operation SENDMSG =
                    RequestPOJO_Operation_SENDMSG;
            static constexpr Operation GETMSG =
                    RequestPOJO_Operation_GETMSG;
            static constexpr Operation HEARTBEAT =
                    RequestPOJO_Operation_HEARTBEAT;
            static constexpr Operation VERSION =
                    RequestPOJO_Operation_VERSION;
            static constexpr Operation GET_CHANNEL_LIST =
                    RequestPOJO_Operation_GET_CHANNEL_LIST;
            static constexpr Operation GET_MEMBER_LIST =
                    RequestPOJO_Operation_GET_MEMBER_LIST;

            static inline bool Operation_IsValid(int value)
            {
                return RequestPOJO_Operation_IsValid(value);
            }

            static constexpr Operation Operation_MIN =
                    RequestPOJO_Operation_Operation_MIN;
            static constexpr Operation Operation_MAX =
                    RequestPOJO_Operation_Operation_MAX;
            static constexpr int Operation_ARRAYSIZE =
                    RequestPOJO_Operation_Operation_ARRAYSIZE;

            static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
            Operation_descriptor()
            {
                return RequestPOJO_Operation_descriptor();
            }

            template<typename T>
            static inline const std::string &Operation_Name(T enum_t_value)
            {
                static_assert(::std::is_same<T, Operation>::value ||
                              ::std::is_integral<T>::value,
                              "Incorrect type passed to function Operation_Name.");
                return RequestPOJO_Operation_Name(enum_t_value);
            }

            static inline bool Operation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
                                               Operation *value)
            {
                return RequestPOJO_Operation_Parse(name, value);
            }

            // accessors -------------------------------------------------------

            enum : int
            {
                kMessageFieldNumber = 2,
                kChannelFieldNumber = 3,
                kOperationFieldNumber = 1,
            };

            // optional .proto.request.Message message = 2;
            bool has_message() const;

        private:
            bool _internal_has_message() const;

        public:
            void clear_message();

            const ::proto::request::Message &message() const;

            PROTOBUF_NODISCARD ::proto::request::Message *release_message();

            ::proto::request::Message *mutable_message();

            void set_allocated_message(::proto::request::Message *message);

        private:
            const ::proto::request::Message &_internal_message() const;

            ::proto::request::Message *_internal_mutable_message();

        public:
            void unsafe_arena_set_allocated_message(
                    ::proto::request::Message *message);

            ::proto::request::Message *unsafe_arena_release_message();

            // optional .proto.request.Channel channel = 3;
            bool has_channel() const;

        private:
            bool _internal_has_channel() const;

        public:
            void clear_channel();

            const ::proto::request::Channel &channel() const;

            PROTOBUF_NODISCARD ::proto::request::Channel *release_channel();

            ::proto::request::Channel *mutable_channel();

            void set_allocated_channel(::proto::request::Channel *channel);

        private:
            const ::proto::request::Channel &_internal_channel() const;

            ::proto::request::Channel *_internal_mutable_channel();

        public:
            void unsafe_arena_set_allocated_channel(
                    ::proto::request::Channel *channel);

            ::proto::request::Channel *unsafe_arena_release_channel();

            // .proto.request.RequestPOJO.Operation operation = 1;
            void clear_operation();

            ::proto::request::RequestPOJO_Operation operation() const;

            void set_operation(::proto::request::RequestPOJO_Operation value);

        private:
            ::proto::request::RequestPOJO_Operation _internal_operation() const;

            void _internal_set_operation(::proto::request::RequestPOJO_Operation value);

        public:

            // @@protoc_insertion_point(class_scope:proto.request.RequestPOJO)
        private:
            class _Internal;

            template<typename T> friend
            class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

            typedef void InternalArenaConstructable_;
            typedef void DestructorSkippable_;
            ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
            ::proto::request::Message *message_;
            ::proto::request::Channel *channel_;
            int operation_;
            friend struct ::TableStruct_Request_2eproto;
        };
// -------------------------------------------------------------------

        class Channel final :
                public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.request.Channel) */ {
        public:
            inline Channel() : Channel(nullptr)
            {}

            ~Channel() override;

            explicit constexpr Channel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

            Channel(const Channel &from);

            Channel(Channel &&from) noexcept
                    : Channel()
            {
                *this = ::std::move(from);
            }

            inline Channel &operator=(const Channel &from)
            {
                CopyFrom(from);
                return *this;
            }

            inline Channel &operator=(Channel &&from) noexcept
            {
                if (this == &from) return *this;
                if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                    && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                        )
                {
                    InternalSwap(&from);
                } else
                {
                    CopyFrom(from);
                }
                return *this;
            }

            static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor()
            {
                return GetDescriptor();
            }

            static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor()
            {
                return default_instance().GetMetadata().descriptor;
            }

            static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection()
            {
                return default_instance().GetMetadata().reflection;
            }

            static const Channel &default_instance()
            {
                return *internal_default_instance();
            }

            static inline const Channel *internal_default_instance()
            {
                return reinterpret_cast<const Channel *>(
                        &_Channel_default_instance_);
            }

            static constexpr int kIndexInFileMessages =
                    1;

            friend void swap(Channel &a, Channel &b)
            {
                a.Swap(&b);
            }

            inline void Swap(Channel *other)
            {
                if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
                if (GetOwningArena() != nullptr &&
                    GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
                if (GetOwningArena() == other->GetOwningArena())
                {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                    InternalSwap(other);
                } else
                {
                    ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
                }
            }

            void UnsafeArenaSwap(Channel *other)
            {
                if (other == this) return;
                GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
                InternalSwap(other);
            }

            // implements Message ----------------------------------------------

            Channel *New(::PROTOBUF_NAMESPACE_ID::Arena *arena = nullptr) const final
            {
                return CreateMaybeMessage<Channel>(arena);
            }

            using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;

            void CopyFrom(const Channel &from);

            using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;

            void MergeFrom(const Channel &from);

        private:
            static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to, const ::PROTOBUF_NAMESPACE_ID::Message &from);

        public:
            PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

            bool IsInitialized() const final;

            size_t ByteSizeLong() const final;

            const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

            uint8_t *_InternalSerialize(
                    uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

            int GetCachedSize() const final
            { return _cached_size_.Get(); }

        private:
            void SharedCtor();

            void SharedDtor();

            void SetCachedSize(int size) const final;

            void InternalSwap(Channel *other);

        private:
            friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

            static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
            {
                return "proto.request.Channel";
            }

        protected:
            explicit Channel(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                             bool is_message_owned = false);

        private:
            static void ArenaDtor(void *object);

            inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

        public:

            static const ClassData _class_data_;

            const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *GetClassData() const final;

            ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

            // nested types ----------------------------------------------------

            // accessors -------------------------------------------------------

            enum : int
            {
                kChannelFieldNumber = 1,
                kTicketFieldNumber = 2,
                kNickFieldNumber = 3,
            };

            // string channel = 1;
            void clear_channel();

            const std::string &channel() const;

            template<typename ArgT0 = const std::string &, typename... ArgT>
            void set_channel(ArgT0 &&arg0, ArgT... args);

            std::string *mutable_channel();

            PROTOBUF_NODISCARD std::string *release_channel();

            void set_allocated_channel(std::string *channel);

        private:
            const std::string &_internal_channel() const;

            inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(const std::string &value);

            std::string *_internal_mutable_channel();

        public:

            // optional string ticket = 2;
            bool has_ticket() const;

        private:
            bool _internal_has_ticket() const;

        public:
            void clear_ticket();

            const std::string &ticket() const;

            template<typename ArgT0 = const std::string &, typename... ArgT>
            void set_ticket(ArgT0 &&arg0, ArgT... args);

            std::string *mutable_ticket();

            PROTOBUF_NODISCARD std::string *release_ticket();

            void set_allocated_ticket(std::string *ticket);

        private:
            const std::string &_internal_ticket() const;

            inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string &value);

            std::string *_internal_mutable_ticket();

        public:

            // optional string nick = 3;
            bool has_nick() const;

        private:
            bool _internal_has_nick() const;

        public:
            void clear_nick();

            const std::string &nick() const;

            template<typename ArgT0 = const std::string &, typename... ArgT>
            void set_nick(ArgT0 &&arg0, ArgT... args);

            std::string *mutable_nick();

            PROTOBUF_NODISCARD std::string *release_nick();

            void set_allocated_nick(std::string *nick);

        private:
            const std::string &_internal_nick() const;

            inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick(const std::string &value);

            std::string *_internal_mutable_nick();

        public:

            // @@protoc_insertion_point(class_scope:proto.request.Channel)
        private:
            class _Internal;

            template<typename T> friend
            class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

            typedef void InternalArenaConstructable_;
            typedef void DestructorSkippable_;
            ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
            friend struct ::TableStruct_Request_2eproto;
        };
// -------------------------------------------------------------------

        class Message final :
                public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.request.Message) */ {
        public:
            inline Message() : Message(nullptr)
            {}

            ~Message() override;

            explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

            Message(const Message &from);

            Message(Message &&from) noexcept
                    : Message()
            {
                *this = ::std::move(from);
            }

            inline Message &operator=(const Message &from)
            {
                CopyFrom(from);
                return *this;
            }

            inline Message &operator=(Message &&from) noexcept
            {
                if (this == &from) return *this;
                if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                    && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                        )
                {
                    InternalSwap(&from);
                } else
                {
                    CopyFrom(from);
                }
                return *this;
            }

            static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor()
            {
                return GetDescriptor();
            }

            static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor()
            {
                return default_instance().GetMetadata().descriptor;
            }

            static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection()
            {
                return default_instance().GetMetadata().reflection;
            }

            static const Message &default_instance()
            {
                return *internal_default_instance();
            }

            static inline const Message *internal_default_instance()
            {
                return reinterpret_cast<const Message *>(
                        &_Message_default_instance_);
            }

            static constexpr int kIndexInFileMessages =
                    2;

            friend void swap(Message &a, Message &b)
            {
                a.Swap(&b);
            }

            inline void Swap(Message *other)
            {
                if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
                if (GetOwningArena() != nullptr &&
                    GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
                if (GetOwningArena() == other->GetOwningArena())
                {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                    InternalSwap(other);
                } else
                {
                    ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
                }
            }

            void UnsafeArenaSwap(Message *other)
            {
                if (other == this) return;
                GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
                InternalSwap(other);
            }

            // implements Message ----------------------------------------------

            Message *New(::PROTOBUF_NAMESPACE_ID::Arena *arena = nullptr) const final
            {
                return CreateMaybeMessage<Message>(arena);
            }

            using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;

            void CopyFrom(const Message &from);

            using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;

            void MergeFrom(const Message &from);

        private:
            static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to, const ::PROTOBUF_NAMESPACE_ID::Message &from);

        public:
            PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

            bool IsInitialized() const final;

            size_t ByteSizeLong() const final;

            const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

            uint8_t *_InternalSerialize(
                    uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

            int GetCachedSize() const final
            { return _cached_size_.Get(); }

        private:
            void SharedCtor();

            void SharedDtor();

            void SetCachedSize(int size) const final;

            void InternalSwap(Message *other);

        private:
            friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

            static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
            {
                return "proto.request.Message";
            }

        protected:
            explicit Message(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                             bool is_message_owned = false);

        private:
            static void ArenaDtor(void *object);

            inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

        public:

            static const ClassData _class_data_;

            const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *GetClassData() const final;

            ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

            // nested types ----------------------------------------------------

            // accessors -------------------------------------------------------

            enum : int
            {
                kChannelFieldNumber = 1,
                kContentFieldNumber = 3,
            };

            // string channel = 1;
            void clear_channel();

            const std::string &channel() const;

            template<typename ArgT0 = const std::string &, typename... ArgT>
            void set_channel(ArgT0 &&arg0, ArgT... args);

            std::string *mutable_channel();

            PROTOBUF_NODISCARD std::string *release_channel();

            void set_allocated_channel(std::string *channel);

        private:
            const std::string &_internal_channel() const;

            inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(const std::string &value);

            std::string *_internal_mutable_channel();

        public:

            // string content = 3;
            void clear_content();

            const std::string &content() const;

            template<typename ArgT0 = const std::string &, typename... ArgT>
            void set_content(ArgT0 &&arg0, ArgT... args);

            std::string *mutable_content();

            PROTOBUF_NODISCARD std::string *release_content();

            void set_allocated_content(std::string *content);

        private:
            const std::string &_internal_content() const;

            inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string &value);

            std::string *_internal_mutable_content();

        public:

            // @@protoc_insertion_point(class_scope:proto.request.Message)
        private:
            class _Internal;

            template<typename T> friend
            class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

            typedef void InternalArenaConstructable_;
            typedef void DestructorSkippable_;
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
            mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
            friend struct ::TableStruct_Request_2eproto;
        };
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestPOJO

// .proto.request.RequestPOJO.Operation operation = 1;
        inline void RequestPOJO::clear_operation()
        {
            operation_ = 0;
        }

        inline ::proto::request::RequestPOJO_Operation RequestPOJO::_internal_operation() const
        {
            return static_cast< ::proto::request::RequestPOJO_Operation >(operation_);
        }

        inline ::proto::request::RequestPOJO_Operation RequestPOJO::operation() const
        {
            // @@protoc_insertion_point(field_get:proto.request.RequestPOJO.operation)
            return _internal_operation();
        }

        inline void RequestPOJO::_internal_set_operation(::proto::request::RequestPOJO_Operation value)
        {

            operation_ = value;
        }

        inline void RequestPOJO::set_operation(::proto::request::RequestPOJO_Operation value)
        {
            _internal_set_operation(value);
            // @@protoc_insertion_point(field_set:proto.request.RequestPOJO.operation)
        }

// optional .proto.request.Message message = 2;
        inline bool RequestPOJO::_internal_has_message() const
        {
            bool value = (_has_bits_[0] & 0x00000001u) != 0;
            PROTOBUF_ASSUME(!value || message_ != nullptr);
            return value;
        }

        inline bool RequestPOJO::has_message() const
        {
            return _internal_has_message();
        }

        inline void RequestPOJO::clear_message()
        {
            if (message_ != nullptr) message_->Clear();
            _has_bits_[0] &= ~0x00000001u;
        }

        inline const ::proto::request::Message &RequestPOJO::_internal_message() const
        {
            const ::proto::request::Message *p = message_;
            return p != nullptr ? *p : reinterpret_cast<const ::proto::request::Message &>(
                    ::proto::request::_Message_default_instance_);
        }

        inline const ::proto::request::Message &RequestPOJO::message() const
        {
            // @@protoc_insertion_point(field_get:proto.request.RequestPOJO.message)
            return _internal_message();
        }

        inline void RequestPOJO::unsafe_arena_set_allocated_message(
                ::proto::request::Message *message)
        {
            if (GetArenaForAllocation() == nullptr)
            {
                delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(message_);
            }
            message_ = message;
            if (message)
            {
                _has_bits_[0] |= 0x00000001u;
            } else
            {
                _has_bits_[0] &= ~0x00000001u;
            }
            // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.request.RequestPOJO.message)
        }

        inline ::proto::request::Message *RequestPOJO::release_message()
        {
            _has_bits_[0] &= ~0x00000001u;
            ::proto::request::Message *temp = message_;
            message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
            auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
            if (GetArenaForAllocation() != nullptr)
            {
                temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
            return temp;
        }

        inline ::proto::request::Message *RequestPOJO::unsafe_arena_release_message()
        {
            // @@protoc_insertion_point(field_release:proto.request.RequestPOJO.message)
            _has_bits_[0] &= ~0x00000001u;
            ::proto::request::Message *temp = message_;
            message_ = nullptr;
            return temp;
        }

        inline ::proto::request::Message *RequestPOJO::_internal_mutable_message()
        {
            _has_bits_[0] |= 0x00000001u;
            if (message_ == nullptr)
            {
                auto *p = CreateMaybeMessage<::proto::request::Message>(GetArenaForAllocation());
                message_ = p;
            }
            return message_;
        }

        inline ::proto::request::Message *RequestPOJO::mutable_message()
        {
            ::proto::request::Message *_msg = _internal_mutable_message();
            // @@protoc_insertion_point(field_mutable:proto.request.RequestPOJO.message)
            return _msg;
        }

        inline void RequestPOJO::set_allocated_message(::proto::request::Message *message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArenaForAllocation();
            if (message_arena == nullptr)
            {
                delete message_;
            }
            if (message)
            {
                ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
                        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::request::Message>::GetOwningArena(
                                message);
                if (message_arena != submessage_arena)
                {
                    message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                            message_arena, message, submessage_arena);
                }
                _has_bits_[0] |= 0x00000001u;
            } else
            {
                _has_bits_[0] &= ~0x00000001u;
            }
            message_ = message;
            // @@protoc_insertion_point(field_set_allocated:proto.request.RequestPOJO.message)
        }

// optional .proto.request.Channel channel = 3;
        inline bool RequestPOJO::_internal_has_channel() const
        {
            bool value = (_has_bits_[0] & 0x00000002u) != 0;
            PROTOBUF_ASSUME(!value || channel_ != nullptr);
            return value;
        }

        inline bool RequestPOJO::has_channel() const
        {
            return _internal_has_channel();
        }

        inline void RequestPOJO::clear_channel()
        {
            if (channel_ != nullptr) channel_->Clear();
            _has_bits_[0] &= ~0x00000002u;
        }

        inline const ::proto::request::Channel &RequestPOJO::_internal_channel() const
        {
            const ::proto::request::Channel *p = channel_;
            return p != nullptr ? *p : reinterpret_cast<const ::proto::request::Channel &>(
                    ::proto::request::_Channel_default_instance_);
        }

        inline const ::proto::request::Channel &RequestPOJO::channel() const
        {
            // @@protoc_insertion_point(field_get:proto.request.RequestPOJO.channel)
            return _internal_channel();
        }

        inline void RequestPOJO::unsafe_arena_set_allocated_channel(
                ::proto::request::Channel *channel)
        {
            if (GetArenaForAllocation() == nullptr)
            {
                delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(channel_);
            }
            channel_ = channel;
            if (channel)
            {
                _has_bits_[0] |= 0x00000002u;
            } else
            {
                _has_bits_[0] &= ~0x00000002u;
            }
            // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.request.RequestPOJO.channel)
        }

        inline ::proto::request::Channel *RequestPOJO::release_channel()
        {
            _has_bits_[0] &= ~0x00000002u;
            ::proto::request::Channel *temp = channel_;
            channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
            auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
            if (GetArenaForAllocation() != nullptr)
            {
                temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
            }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
            return temp;
        }

        inline ::proto::request::Channel *RequestPOJO::unsafe_arena_release_channel()
        {
            // @@protoc_insertion_point(field_release:proto.request.RequestPOJO.channel)
            _has_bits_[0] &= ~0x00000002u;
            ::proto::request::Channel *temp = channel_;
            channel_ = nullptr;
            return temp;
        }

        inline ::proto::request::Channel *RequestPOJO::_internal_mutable_channel()
        {
            _has_bits_[0] |= 0x00000002u;
            if (channel_ == nullptr)
            {
                auto *p = CreateMaybeMessage<::proto::request::Channel>(GetArenaForAllocation());
                channel_ = p;
            }
            return channel_;
        }

        inline ::proto::request::Channel *RequestPOJO::mutable_channel()
        {
            ::proto::request::Channel *_msg = _internal_mutable_channel();
            // @@protoc_insertion_point(field_mutable:proto.request.RequestPOJO.channel)
            return _msg;
        }

        inline void RequestPOJO::set_allocated_channel(::proto::request::Channel *channel)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArenaForAllocation();
            if (message_arena == nullptr)
            {
                delete channel_;
            }
            if (channel)
            {
                ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
                        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::request::Channel>::GetOwningArena(
                                channel);
                if (message_arena != submessage_arena)
                {
                    channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                            message_arena, channel, submessage_arena);
                }
                _has_bits_[0] |= 0x00000002u;
            } else
            {
                _has_bits_[0] &= ~0x00000002u;
            }
            channel_ = channel;
            // @@protoc_insertion_point(field_set_allocated:proto.request.RequestPOJO.channel)
        }

// -------------------------------------------------------------------

// Channel

// string channel = 1;
        inline void Channel::clear_channel()
        {
            channel_.ClearToEmpty();
        }

        inline const std::string &Channel::channel() const
        {
            // @@protoc_insertion_point(field_get:proto.request.Channel.channel)
            return _internal_channel();
        }

        template<typename ArgT0, typename... ArgT>
        inline PROTOBUF_ALWAYS_INLINE
        void Channel::set_channel(ArgT0 &&arg0, ArgT... args)
        {

            channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0),
                         args..., GetArenaForAllocation());
            // @@protoc_insertion_point(field_set:proto.request.Channel.channel)
        }

        inline std::string *Channel::mutable_channel()
        {
            std::string *_s = _internal_mutable_channel();
            // @@protoc_insertion_point(field_mutable:proto.request.Channel.channel)
            return _s;
        }

        inline const std::string &Channel::_internal_channel() const
        {
            return channel_.Get();
        }

        inline void Channel::_internal_set_channel(const std::string &value)
        {

            channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
                         GetArenaForAllocation());
        }

        inline std::string *Channel::_internal_mutable_channel()
        {

            return channel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                    GetArenaForAllocation());
        }

        inline std::string *Channel::release_channel()
        {
            // @@protoc_insertion_point(field_release:proto.request.Channel.channel)
            return channel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    GetArenaForAllocation());
        }

        inline void Channel::set_allocated_channel(std::string *channel)
        {
            if (channel != nullptr)
            {

            } else
            {

            }
            channel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel,
                                  GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (channel_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
              channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
            }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            // @@protoc_insertion_point(field_set_allocated:proto.request.Channel.channel)
        }

// optional string ticket = 2;
        inline bool Channel::_internal_has_ticket() const
        {
            bool value = (_has_bits_[0] & 0x00000001u) != 0;
            return value;
        }

        inline bool Channel::has_ticket() const
        {
            return _internal_has_ticket();
        }

        inline void Channel::clear_ticket()
        {
            ticket_.ClearToEmpty();
            _has_bits_[0] &= ~0x00000001u;
        }

        inline const std::string &Channel::ticket() const
        {
            // @@protoc_insertion_point(field_get:proto.request.Channel.ticket)
            return _internal_ticket();
        }

        template<typename ArgT0, typename... ArgT>
        inline PROTOBUF_ALWAYS_INLINE
        void Channel::set_ticket(ArgT0 &&arg0, ArgT... args)
        {
            _has_bits_[0] |= 0x00000001u;
            ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0),
                        args..., GetArenaForAllocation());
            // @@protoc_insertion_point(field_set:proto.request.Channel.ticket)
        }

        inline std::string *Channel::mutable_ticket()
        {
            std::string *_s = _internal_mutable_ticket();
            // @@protoc_insertion_point(field_mutable:proto.request.Channel.ticket)
            return _s;
        }

        inline const std::string &Channel::_internal_ticket() const
        {
            return ticket_.Get();
        }

        inline void Channel::_internal_set_ticket(const std::string &value)
        {
            _has_bits_[0] |= 0x00000001u;
            ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
                        GetArenaForAllocation());
        }

        inline std::string *Channel::_internal_mutable_ticket()
        {
            _has_bits_[0] |= 0x00000001u;
            return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                   GetArenaForAllocation());
        }

        inline std::string *Channel::release_ticket()
        {
            // @@protoc_insertion_point(field_release:proto.request.Channel.ticket)
            if (!_internal_has_ticket())
            {
                return nullptr;
            }
            _has_bits_[0] &= ~0x00000001u;
            auto *p = ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                                GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
              ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
            }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            return p;
        }

        inline void Channel::set_allocated_ticket(std::string *ticket)
        {
            if (ticket != nullptr)
            {
                _has_bits_[0] |= 0x00000001u;
            } else
            {
                _has_bits_[0] &= ~0x00000001u;
            }
            ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
                                 GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
              ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
            }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            // @@protoc_insertion_point(field_set_allocated:proto.request.Channel.ticket)
        }

// optional string nick = 3;
        inline bool Channel::_internal_has_nick() const
        {
            bool value = (_has_bits_[0] & 0x00000002u) != 0;
            return value;
        }

        inline bool Channel::has_nick() const
        {
            return _internal_has_nick();
        }

        inline void Channel::clear_nick()
        {
            nick_.ClearToEmpty();
            _has_bits_[0] &= ~0x00000002u;
        }

        inline const std::string &Channel::nick() const
        {
            // @@protoc_insertion_point(field_get:proto.request.Channel.nick)
            return _internal_nick();
        }

        template<typename ArgT0, typename... ArgT>
        inline PROTOBUF_ALWAYS_INLINE
        void Channel::set_nick(ArgT0 &&arg0, ArgT... args)
        {
            _has_bits_[0] |= 0x00000002u;
            nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0),
                      args..., GetArenaForAllocation());
            // @@protoc_insertion_point(field_set:proto.request.Channel.nick)
        }

        inline std::string *Channel::mutable_nick()
        {
            std::string *_s = _internal_mutable_nick();
            // @@protoc_insertion_point(field_mutable:proto.request.Channel.nick)
            return _s;
        }

        inline const std::string &Channel::_internal_nick() const
        {
            return nick_.Get();
        }

        inline void Channel::_internal_set_nick(const std::string &value)
        {
            _has_bits_[0] |= 0x00000002u;
            nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
                      GetArenaForAllocation());
        }

        inline std::string *Channel::_internal_mutable_nick()
        {
            _has_bits_[0] |= 0x00000002u;
            return nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                 GetArenaForAllocation());
        }

        inline std::string *Channel::release_nick()
        {
            // @@protoc_insertion_point(field_release:proto.request.Channel.nick)
            if (!_internal_has_nick())
            {
                return nullptr;
            }
            _has_bits_[0] &= ~0x00000002u;
            auto *p = nick_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                              GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (nick_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
              nick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
            }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            return p;
        }

        inline void Channel::set_allocated_nick(std::string *nick)
        {
            if (nick != nullptr)
            {
                _has_bits_[0] |= 0x00000002u;
            } else
            {
                _has_bits_[0] &= ~0x00000002u;
            }
            nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick,
                               GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (nick_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
              nick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
            }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            // @@protoc_insertion_point(field_set_allocated:proto.request.Channel.nick)
        }

// -------------------------------------------------------------------

// Message

// string channel = 1;
        inline void Message::clear_channel()
        {
            channel_.ClearToEmpty();
        }

        inline const std::string &Message::channel() const
        {
            // @@protoc_insertion_point(field_get:proto.request.Message.channel)
            return _internal_channel();
        }

        template<typename ArgT0, typename... ArgT>
        inline PROTOBUF_ALWAYS_INLINE
        void Message::set_channel(ArgT0 &&arg0, ArgT... args)
        {

            channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0),
                         args..., GetArenaForAllocation());
            // @@protoc_insertion_point(field_set:proto.request.Message.channel)
        }

        inline std::string *Message::mutable_channel()
        {
            std::string *_s = _internal_mutable_channel();
            // @@protoc_insertion_point(field_mutable:proto.request.Message.channel)
            return _s;
        }

        inline const std::string &Message::_internal_channel() const
        {
            return channel_.Get();
        }

        inline void Message::_internal_set_channel(const std::string &value)
        {

            channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
                         GetArenaForAllocation());
        }

        inline std::string *Message::_internal_mutable_channel()
        {

            return channel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                    GetArenaForAllocation());
        }

        inline std::string *Message::release_channel()
        {
            // @@protoc_insertion_point(field_release:proto.request.Message.channel)
            return channel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    GetArenaForAllocation());
        }

        inline void Message::set_allocated_channel(std::string *channel)
        {
            if (channel != nullptr)
            {

            } else
            {

            }
            channel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel,
                                  GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (channel_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
              channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
            }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            // @@protoc_insertion_point(field_set_allocated:proto.request.Message.channel)
        }

// string content = 3;
        inline void Message::clear_content()
        {
            content_.ClearToEmpty();
        }

        inline const std::string &Message::content() const
        {
            // @@protoc_insertion_point(field_get:proto.request.Message.content)
            return _internal_content();
        }

        template<typename ArgT0, typename... ArgT>
        inline PROTOBUF_ALWAYS_INLINE
        void Message::set_content(ArgT0 &&arg0, ArgT... args)
        {

            content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0),
                         args..., GetArenaForAllocation());
            // @@protoc_insertion_point(field_set:proto.request.Message.content)
        }

        inline std::string *Message::mutable_content()
        {
            std::string *_s = _internal_mutable_content();
            // @@protoc_insertion_point(field_mutable:proto.request.Message.content)
            return _s;
        }

        inline const std::string &Message::_internal_content() const
        {
            return content_.Get();
        }

        inline void Message::_internal_set_content(const std::string &value)
        {

            content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value,
                         GetArenaForAllocation());
        }

        inline std::string *Message::_internal_mutable_content()
        {

            return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
                                    GetArenaForAllocation());
        }

        inline std::string *Message::release_content()
        {
            // @@protoc_insertion_point(field_release:proto.request.Message.content)
            return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    GetArenaForAllocation());
        }

        inline void Message::set_allocated_content(std::string *content)
        {
            if (content != nullptr)
            {

            } else
            {

            }
            content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
                                  GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
            if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
              content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
            }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
            // @@protoc_insertion_point(field_set_allocated:proto.request.Message.content)
        }

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

    }  // namespace request
}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

        template<>
        struct is_proto_enum<::proto::request::RequestPOJO_Operation> : ::std::true_type
        {
        };

        template<>
        inline const EnumDescriptor *GetEnumDescriptor<::proto::request::RequestPOJO_Operation>()
        {
            return ::proto::request::RequestPOJO_Operation_descriptor();
        }

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>

#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Request_2eproto
